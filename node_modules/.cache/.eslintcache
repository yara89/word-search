[{"/Users/yara/Desktop/WebDevelopment/word-search/src/index.js":"1","/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/grid.js":"2","/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/wordsearch.js":"3","/Users/yara/Desktop/WebDevelopment/word-search/src/logic/app.js":"4","/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/BoardCell.js":"5","/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/wordList.js":"6"},{"size":290,"mtime":1627326053800,"results":"7","hashOfConfig":"8"},{"size":2683,"mtime":1627906029450,"results":"9","hashOfConfig":"8"},{"size":2360,"mtime":1627902051118,"results":"10","hashOfConfig":"8"},{"size":2864,"mtime":1627899647655,"results":"11","hashOfConfig":"8"},{"size":1460,"mtime":1627903750443,"results":"12","hashOfConfig":"8"},{"size":276,"mtime":1627806834187,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7zppu2",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yara/Desktop/WebDevelopment/word-search/src/index.js",[],"/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/grid.js",["27"],"/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/wordsearch.js",["28","29","30"],"\nimport React from 'react';\nimport Grid from './grid';\nimport * as logic from '../logic/app';\nimport ShowWordList from './wordList';\nimport BoardCell from './BoardCell';\n//import Status from './status'; // import Finished from './status';\n\n\n\n\nexport default class WordSearch extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        highlightedChars: {\n        },\n      };\n      \n      this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\n      let rowCount = 10;\n      let colCount = 10;\n\n      this.grid = logic.getWordGrid(this.wordList, rowCount, colCount);\n\n      this.handleHighlightChange = this.handleHighlightChange.bind(this); \n    }\n\n    handleHighlightChange(rowIndexStart, rowIndexEnd, colIndexStart, colIndexEnd, newHighlightedState){\n      const newHighlightedChars = this.cloneObject(this.state.highlightedChars); \n      if (rowIndexStart == rowIndexEnd){ // if horizontal\n        for (let c = colIndexStart; c <= colIndexEnd; c++) {\n          let charIndex = \"r\" + rowIndexStart + \"-c\" + c;\n          \n          if (newHighlightedState) {\n            newHighlightedChars[charIndex] = true;\n          } else {\n            delete newHighlightedChars[charIndex];\n          }\n      \n        }\n\n      } else if (colIndexStart == colIndexEnd) {// if vertical\n        for (let r = rowIndexStart; r <= rowIndexEnd; r++) {\n          let charIndex = \"r\" + r + \"-c\" + colIndexStart;\n          \n          if (newHighlightedState) {\n            newHighlightedChars[charIndex] = true;\n          } else {\n            delete newHighlightedChars[charIndex];\n          }\n      \n        }\n      }\n    \n    \n      this.setState({\n       highlightedChars: newHighlightedChars, \n      })\n    }\n\n  cloneObject(obj) { \n  return JSON.parse(JSON.stringify(obj));\n  }\n  \n    render() {\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Grid values={this.grid} highlightedChars={this.state.highlightedChars} handleHighlightChange={this.handleHighlightChange}  />\n          </div>\n          <div className=\"game-info\">\n                <ol>Welcome to Word Sreach react game</ol>\n                <ol> <ShowWordList wordList={this.wordList} foundWordList={logic.getWordsFound(this.state.highlightedChars,this.wordList,this.grid)}/></ol>\n\n        </div>\n        </div>\n\n      )}};","/Users/yara/Desktop/WebDevelopment/word-search/src/logic/app.js",[],"/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/BoardCell.js",[],"/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/wordList.js",[],{"ruleId":"31","severity":1,"message":"32","line":80,"column":15,"nodeType":"33","messageId":"34","endLine":80,"endColumn":25},{"ruleId":"31","severity":1,"message":"35","line":6,"column":8,"nodeType":"33","messageId":"34","endLine":6,"endColumn":17},{"ruleId":"36","severity":1,"message":"37","line":31,"column":25,"nodeType":"38","messageId":"39","endLine":31,"endColumn":27},{"ruleId":"36","severity":1,"message":"37","line":43,"column":32,"nodeType":"38","messageId":"39","endLine":43,"endColumn":34},"no-unused-vars","'isSelected' is assigned a value but never used.","Identifier","unusedVar","'BoardCell' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]