{"ast":null,"code":"var _jsxFileName = \"/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/grid.js\";\nimport React from 'react';\nimport BoardCell from './BoardCell';\nimport Table from './otherTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.beginSelection = this.beginSelection.bind(this);\n    this.endSelection = this.endSelection.bind(this);\n    this.updateSelection = this.updateSelection.bind(this);\n    this.state = {\n      isSelecting: false,\n      startRow: 0,\n      startCol: 0,\n      shouldHighlight: 0\n    };\n  }\n\n  cellSelected(rows, cols) {\n    let charIndex = \"r\" + rows + \"-c\" + cols;\n    return this.props.highlightedChars.hasOwnProperty(charIndex);\n  }\n\n  beginSelection(rowIndex, colIndex, val) {\n    console.log(\"beginSelection \" + rowIndex + \" \" + colIndex);\n    let shouldHighlight = !this.cellSelected(rowIndex, colIndex);\n    this.setState({\n      isSelecting: true,\n      startRow: rowIndex,\n      startCol: colIndex,\n      shouldHighlight: shouldHighlight\n    });\n    this.props.handleHighlightChange(rowIndex, rowIndex, colIndex, colIndex, shouldHighlight);\n  }\n\n  endSelection(rowIndex, colIndex, val) {\n    console.log(\"endSelection\");\n    this.updateSelection(rowIndex, colIndex);\n    this.setState({\n      isSelecting: false\n    });\n  }\n\n  updateSelection(rowIndex, colIndex, val) {\n    if (this.state.isSelecting) {\n      if (this.state.startRow === rowIndex) {\n        this.props.handleHighlightChange(rowIndex, rowIndex, Math.min(colIndex, this.state.startCol), Math.max(colIndex, this.state.startCol), this.state.shouldHighlight);\n        Math.max();\n      }\n\n      console.log(\"updateSelection\");\n    }\n  }\n\n  render() {\n    //const status = 'you have' + ' ' + {words.length} + ' words left';\n    const board = [];\n    let rows = 0;\n    this.props.values.forEach(element => {\n      let wordList = [];\n\n      for (let i = 0; i < element.length; i++) {\n        wordList.push( /*#__PURE__*/_jsxDEV(BoardCell, {\n          rowIndex: rows,\n          colIndex: i,\n          letter: element[i],\n          isSelected: this.cellSelected(rows, i),\n          onBeginSelection: this.beginSelection,\n          onEndSelection: this.endSelection,\n          onUpdateSelection: this.updateSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 27\n        }, this));\n      }\n\n      ;\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: wordList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 22\n      }, this));\n      rows++;\n    });\n    let isSelected = [];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/grid.js"],"names":["React","BoardCell","Table","Grid","Component","constructor","props","beginSelection","bind","endSelection","updateSelection","state","isSelecting","startRow","startCol","shouldHighlight","cellSelected","rows","cols","charIndex","highlightedChars","hasOwnProperty","rowIndex","colIndex","val","console","log","setState","handleHighlightChange","Math","min","max","render","board","values","forEach","element","wordList","i","length","push","isSelected"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport BoardCell from './BoardCell'\nimport Table from './otherTable';\n\n\n\nexport default class Grid extends React.Component {\n    constructor(props) {      \n      super(props); \n      this.beginSelection = this.beginSelection.bind(this);\n      this.endSelection = this.endSelection.bind(this);\n      this.updateSelection = this.updateSelection.bind(this);  \n      this.state = {\n        isSelecting: false,\n        startRow:0,\n        startCol:0,\n        shouldHighlight:0\n      }\n    \n     }\n\n\n    cellSelected(rows,cols) {\n      let charIndex=\"r\" + rows + \"-c\" + cols;\n      return this.props.highlightedChars.hasOwnProperty(charIndex);\n    }\n\n    beginSelection(rowIndex, colIndex, val) {\n      console.log(\"beginSelection \" + rowIndex + \" \" + colIndex);\n      let shouldHighlight = !this.cellSelected(rowIndex,colIndex);\n\n\n      this.setState({isSelecting: true, startRow:rowIndex, startCol:colIndex, shouldHighlight:shouldHighlight } )\n      this.props.handleHighlightChange(rowIndex, rowIndex, colIndex, colIndex, shouldHighlight);\n      \n    }\n\n    endSelection(rowIndex, colIndex, val) {\n      console.log(\"endSelection\" );\n      this.updateSelection(rowIndex, colIndex)\n      this.setState({isSelecting: false})\n\n    \n    }\n\n    updateSelection(rowIndex, colIndex, val) {\n     if (this.state.isSelecting) {\n       if (this.state.startRow===rowIndex) {\n            this.props.handleHighlightChange(rowIndex, rowIndex, Math.min(colIndex, this.state.startCol), Math.max(colIndex, this.state.startCol), this.state.shouldHighlight);\n            Math.max()\n\n       } \n       console.log(\"updateSelection\" );\n     }\n    } \n\n    render() {\n      //const status = 'you have' + ' ' + {words.length} + ' words left';\n      const board = [];\n      let rows=0;\n\n      this.props.values.forEach(element => {\n        let wordList =[];\n          for (let i = 0; i < element.length; i++){\n            wordList.push(<BoardCell \n              rowIndex={rows} \n              colIndex={i} \n              letter={element[i]} \n              isSelected={this.cellSelected(rows,i)} \n              onBeginSelection={this.beginSelection}\n              onEndSelection={this.endSelection}\n              onUpdateSelection={this.updateSelection}\n              />) \n          };\n          board.push(<div className=\"board-row\">{wordList}</div>)\n  \n          rows++;\n        });\n          \n          let isSelected = [];\n      \n\n\n      return (\n           <div>\n            {board}\n\n          </div>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}