{"ast":null,"code":"var _jsxFileName = \"/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/wordsearch.js\";\nimport React from 'react';\nimport Grid from './grid';\nimport * as logic from '../logic/app';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class WordSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      highlightedChars: {}\n    };\n    this.state = {\n      history: [{\n        cells: Array(100).fill(null)\n      }],\n      stepNumber: 0 //xIsNext: true\n\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const cells = current.cells.slice();\n\n    if (calculateWinner(cells) || cells[i]) {\n      return;\n    } //squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n\n    this.setState({\n      history: history.concat([{\n        cells: cells\n      }]),\n      stepNumber: history.length //xIsNext: !this.state.xIsNext\n\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n    let wordList = ['house', 'cat', 'leg', 'react', 'hello'];\n    let rowCount = 10;\n    let colCount = 10;\n    this.grid = logic.getWordGrid(wordList, rowCount, colCount);\n    this.showWordList(document.getElementById(\"list\"));\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(rowIndex, colIndex, val) {\n    const newHighlightedChars = this.cloneObject(this.state.highlightedChars);\n    let charIndex = \"r\" + rowIndex + \"-c\" + colIndex;\n\n    if (newHighlightedChars.hasOwnProperty(charIndex)) {\n      delete newHighlightedChars[charIndex];\n    } else {\n      newHighlightedChars[charIndex] = true;\n    }\n\n    console.log(rowIndex);\n    console.log(newHighlightedChars);\n    this.setState({\n      highlightedChars: newHighlightedChars\n    });\n  }\n\n  showWordList() {\n    const wordList = ['house', 'cat', 'leg', 'react', 'hello'];\n  }\n\n  cloneObject(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber]; //const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          values: this.grid,\n          highlightedChars: this.state.highlightedChars,\n          onCellClick: this.handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n          children: \"Welcome to Word Sreach react game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: this.showWordList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/yara/Desktop/WebDevelopment/word-search/src/cmp/wordsearch.js"],"names":["React","Grid","logic","WordSearch","Component","constructor","props","state","highlightedChars","history","cells","Array","fill","stepNumber","handleClick","i","slice","current","length","calculateWinner","setState","concat","jumpTo","step","xIsNext","wordList","rowCount","colCount","grid","getWordGrid","showWordList","document","getElementById","bind","rowIndex","colIndex","val","newHighlightedChars","cloneObject","charIndex","hasOwnProperty","console","log","obj","JSON","parse","stringify","render","moves","map","move","desc"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport Grid from './grid';\nimport * as logic from '../logic/app';\n\n\nexport default class WordSearch extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        highlightedChars: {\n        }\n      };\n      this.state = {\n        history: [\n          {\n            cells: Array(100).fill(null)\n          }\n        ],\n        stepNumber: 0,\n        //xIsNext: true\n      };\n    }\n\n      handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const cells = current.cells.slice();\n        if (calculateWinner(cells) || cells[i]) {\n          return;\n        }\n        //squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n          history: history.concat([\n            {\n              cells: cells\n            }\n          ]),\n          stepNumber: history.length,\n          //xIsNext: !this.state.xIsNext\n        });\n      }\n    \n      jumpTo(step) {\n        this.setState({\n          stepNumber: step,\n          xIsNext: (step % 2) === 0\n        });\n      \n\n      let wordList = ['house', 'cat', 'leg', 'react', 'hello'];\n      let rowCount = 10;\n      let colCount = 10;\n      this.grid = logic.getWordGrid(wordList, rowCount, colCount);\n      this.showWordList(document.getElementById(\"list\"));\n      this.handleClick = this.handleClick.bind(this); \n    }\n\n    handleClick(rowIndex, colIndex, val){\n      const newHighlightedChars = this.cloneObject(this.state.highlightedChars); \n      let charIndex = \"r\" + rowIndex + \"-c\" + colIndex;\n        if (newHighlightedChars.hasOwnProperty(charIndex)) {\n          delete newHighlightedChars[charIndex];\n        } else {\n          newHighlightedChars[charIndex] = true;\n        }\n      \n      console.log(rowIndex); \n      console.log(newHighlightedChars); \n\n      this.setState({\n        highlightedChars: newHighlightedChars, \n          })\n    }\n\n \n    showWordList() {\n      const wordList = ['house', 'cat', 'leg', 'react', 'hello'];\n    }\n    \n  cloneObject(obj) { \n  return JSON.parse(JSON.stringify(obj));\n  }\n  \n        render() {\n          const history = this.state.history;\n          const current = history[this.state.stepNumber];\n          //const winner = calculateWinner(current.squares);\n\n          const moves = history.map((step, move) => {\n            const desc = move ?\n              'Go to move #' + move :\n              'Go to game start';\n            return (\n              <li key={move}>\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\n              </li>\n            );\n          });\n\n\n         return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Grid values={this.grid} highlightedChars={this.state.highlightedChars} onCellClick={this.handleClick} />\n          </div>\n          <div className=\"game-info\">\n                  <ol>Welcome to Word Sreach react game</ol>\n                <ol>{this.showWordList}</ol>\n                <ol>{moves}</ol>\n\n        </div>\n        </div>\n\n      )}};"]},"metadata":{},"sourceType":"module"}