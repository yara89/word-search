{"ast":null,"code":"var _jsxFileName = \"/Users/yara/Desktop/WebDevelopment/word-search/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as logic from './wordsearch.js';\n/* TODO\n\nallow Selection of multiple cells\nGenerate words, and find a place it fits in grid\nallow diagonal selection?\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.onCellClick(this.props.rowIndex, this.props.colIndex);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cell\",\n      onClick: this.handleClick,\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  renderCell(i) {\n    return /*#__PURE__*/_jsxDEV(Cell, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  handleClick(rowIndex, colIndex) {\n    console.log(\"hello\");\n  }\n\n  render() {\n    const status = 'you have # words left';\n    const board = [];\n    this.props.values.forEach(element => {\n      let wordList = [];\n\n      for (let i = 0; i < element.length; i++) {\n        wordList.push( /*#__PURE__*/_jsxDEV(Cell, {\n          value: element[i],\n          onCellClick: this.handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: wordList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 20\n      }, this));\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), board]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass WordSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    let wordList = ['house', 'cat', 'leg'];\n    let rowCount = 10;\n    let colCount = 10;\n    this.grid = logic.getWordGrid(wordList, rowCount, colCount);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          values: this.grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(WordSearch, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 90,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/yara/Desktop/WebDevelopment/word-search/src/index.js"],"names":["React","ReactDOM","logic","Cell","Component","constructor","props","handleClick","bind","e","onCellClick","rowIndex","colIndex","render","value","Grid","renderCell","i","console","log","status","board","values","forEach","element","wordList","length","push","WordSearch","rowCount","colCount","grid","getWordGrid","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as logic from './wordsearch.js'\n\n/* TODO\n\nallow Selection of multiple cells\nGenerate words, and find a place it fits in grid\nallow diagonal selection?\n\n*/\n\nclass Cell extends React.Component {\n  constructor(props) {      \n     super(props);     \n      this.handleClick = this.handleClick.bind(this); }\n\n  handleClick(e) { this.props.onCellClick(this.props.rowIndex, this.props.colIndex);  }\n  render() {\n    return (\n      <button className=\"cell\" onClick={this.handleClick} >\n       {this.props.value}\n      </button>\n    );\n  }\n}\n\n\nclass Grid extends React.Component {\n  constructor(props) {      \n    super(props);     \n     this.handleClick = this.handleClick.bind(this); }\n\n  renderCell(i) {\n    return <Cell />;\n  }\n  handleClick(rowIndex, colIndex){\n  console.log(\"hello\")}\n\n  render() {\n    const status = 'you have # words left';\n\n    const board = [];\n\n    this.props.values.forEach(element => {\n      let wordList =[];\n        for (let i = 0; i < element.length; i++){\n          wordList.push(<Cell value={element[i]}  onCellClick={this.handleClick}  />) \n        }\n        board.push(<div className=\"board-row\">{wordList}</div>)\n      });\n    \n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        {board}\n        </div>\n    );\n  }\n}\n   \n\n\nclass WordSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    let wordList = ['house', 'cat', 'leg'];\n    let rowCount = 10;\n    let colCount = 10;\n    this.grid = logic.getWordGrid(wordList, rowCount, colCount);\n  }\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Grid values={this.grid} />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <WordSearch />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}