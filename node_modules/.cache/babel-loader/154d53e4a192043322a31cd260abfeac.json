{"ast":null,"code":"function getWordGrid(wordList, rowCount, colCount) {\n  let grid = []; //creating empty grid\n\n  for (let r = 0; r < rowCount; r++) {\n    let col = [];\n\n    for (let c = 0; c < colCount; c++) {\n      col.push('');\n    }\n\n    grid.push(col);\n  }\n\n  let usedRows = []; // fill with  words from word list\n\n  for (let w = 0; w < wordList.length; w++) {\n    let word = wordList[w];\n    let randomRow = null;\n    let foundRow = false;\n\n    while (!foundRow) {\n      randomRow = getRandomInt(0, rowCount - 1);\n\n      if (!usedRows.includes(randomRow)) {\n        usedRows.push(randomRow);\n        foundRow = true;\n      }\n    }\n\n    let colStart = getRandomInt(0, colCount - word.length - 1);\n    console.log(\"placing \" + word + \" in \" + randomRow + \" \" + colStart);\n\n    for (let i = 0; i < word.length; i++) {\n      let letter = word[i];\n      grid[randomRow][colStart + i] = letter.toUpperCase();\n    }\n  } // fill remaining empty cells with random letters\n\n\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\n  for (let r = 0; r < rowCount; r++) {\n    for (let c = 0; c < colCount; c++) {\n      if (grid[r][c] === '') {\n        const randomCharacter = alphabet[Math.floor(Math.random() * alphabet.length)];\n        grid[r][c] = randomCharacter;\n      }\n    }\n  }\n\n  return grid;\n}\n/* higihlightedChars = {\"r0-c0\": true,\n          \"r1-c0\": true,\n          \"r2-c0\": true,\n        }, \n  this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\nthis.grid = [['d','o','g','t','s'],['h','e','h','s', 'm',],['d','i','h','l','m',]]\n      }*/\n\n\nfunction getWordsFound(highlightedChars, wordList, grid) {\n  let found = [];\n\n  for (let r = 0; r < grid.length; r++) {\n    let row = grid[r];\n    let currSelectedWord = '';\n\n    for (let c = 0; c < row.length; c++) {\n      let letter = row[c];\n      let highlightedIndex = \"r\" + r + \"-c\" + c;\n      let isHighlighted = highlightedChars.hasOwnProperty(highlightedIndex);\n\n      if (isHighlighted) {\n        currSelectedWord = currSelectedWord + letter;\n      } else {\n        // check if currSelectedWord is word\n        if (wordList.includes(currSelectedWord)) {\n          found.push(currSelectedWord);\n        } // reset \n\n\n        currSelectedWord = \"\";\n      }\n    }\n  }\n\n  return ['hello'];\n}\n/**\n * Returns a random integer between min (inclusive) and max .\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\n\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nmodule.exports = {\n  getWordGrid,\n  getWordsFound\n};","map":{"version":3,"sources":["/Users/yara/Desktop/WebDevelopment/word-search/src/logic/app.js"],"names":["getWordGrid","wordList","rowCount","colCount","grid","r","col","c","push","usedRows","w","length","word","randomRow","foundRow","getRandomInt","includes","colStart","console","log","i","letter","toUpperCase","alphabet","randomCharacter","Math","floor","random","getWordsFound","highlightedChars","found","row","currSelectedWord","highlightedIndex","isHighlighted","hasOwnProperty","min","max","ceil","module","exports"],"mappings":"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","sourcesContent":["function getWordGrid(wordList, rowCount, colCount) {\n   let grid = []\n   \n   //creating empty grid\n    for (let r = 0; r < rowCount; r++) {\n       let col = []; \n       for (let c = 0; c < colCount; c++) {\n             col.push('');\n       } \n       grid.push(col);\n    } \n    let usedRows = [];\n    // fill with  words from word list\n    for ( let w = 0; w < wordList.length; w++) {\n      let word = wordList[w];\n      let randomRow = null;\n      let foundRow = false;\n      while (!foundRow) {\n        randomRow = getRandomInt(0, rowCount - 1); \n        if ( !usedRows.includes(randomRow) ) {\n          usedRows.push(randomRow);\n          foundRow = true;\n        }\n      } \n\n      let colStart = getRandomInt(0, colCount - word.length - 1);\n      console.log(\"placing \" + word + \" in \" + randomRow + \" \" + colStart);\n      \n      for (let i = 0; i < word.length; i++) {\n        let letter = word[i];\n          grid[randomRow][colStart + i] = letter.toUpperCase();\n      }\n    }      \n    // fill remaining empty cells with random letters\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \n    for (let r = 0; r < rowCount; r++) {\n        for (let c = 0; c < colCount; c++) {\n          if ( grid[r][c] === '' ) {\n            const randomCharacter = alphabet[Math.floor(Math.random() * alphabet.length)]\n            grid[r][c] = randomCharacter;\n          }\n      }\n    }\n\n    return grid;\n} \n/* higihlightedChars = {\"r0-c0\": true,\n          \"r1-c0\": true,\n          \"r2-c0\": true,\n        }, \n  this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\nthis.grid = [['d','o','g','t','s'],['h','e','h','s', 'm',],['d','i','h','l','m',]]\n      }*/\n\nfunction getWordsFound (highlightedChars, wordList, grid) {\n  let found = []; \n  for (let r=0; r < grid.length; r++) {\n    let row = grid[r];\n    let currSelectedWord = '';\n    for (let c=0; c < row.length; c++) {\n     let letter = row[c];\n     let highlightedIndex = \"r\" + r + \"-c\" + c;\n     let isHighlighted = highlightedChars.hasOwnProperty(highlightedIndex);\n     if (isHighlighted) { \n       currSelectedWord = currSelectedWord + letter;\n     } else {\n        // check if currSelectedWord is word\n        if (wordList.includes(currSelectedWord)) {\n          found.push(currSelectedWord);\n\n        } \n        // reset \n        currSelectedWord = \"\";\n     }\n    } \n  }\n  return ['hello'] \n\n}\n/**\n * Returns a random integer between min (inclusive) and max .\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nmodule.exports = { getWordGrid, getWordsFound };"]},"metadata":{},"sourceType":"module"}