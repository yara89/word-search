{"ast":null,"code":"function getWordGrid(wordList,rowCount,colCount){var grid=[];//creating empty grid\nfor(var r=0;r<rowCount;r++){var col=[];for(var c=0;c<colCount;c++){col.push('');}grid.push(col);}var usedRows=[];// fill with  words from word list\nfor(var w=0;w<wordList.length;w++){var word=wordList[w];var randomRow=null;var foundRow=false;while(!foundRow){randomRow=getRandomInt(0,rowCount-1);if(!usedRows.includes(randomRow)){usedRows.push(randomRow);foundRow=true;}}var colStart=getRandomInt(0,colCount-word.length);console.log(\"placing \"+word+\" in \"+randomRow+\" \"+colStart);for(var i=0;i<word.length;i++){var letter=word[i];grid[randomRow][colStart+i]=letter.toUpperCase();}}// fill remaining empty cells with random letters\nvar alphabet=\"abcdefghijklmnopqrstuvwxyz\";for(var _r=0;_r<rowCount;_r++){for(var _c=0;_c<colCount;_c++){if(grid[_r][_c]===''){var randomCharacter=alphabet[Math.floor(Math.random()*alphabet.length)];grid[_r][_c]=randomCharacter;}}}return grid;}/* higihlightedChars = {\"r0-c0\": true,\n          \"r1-c0\": true,\n          \"r2-c0\": true,\n        }, \n  this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\nthis.grid = [['d','o','g','t','s'],['h','e','h','s', 'm',],['d','i','h','l','m',]]\n      }*/function getWordsFound(highlightedChars,wordList,grid){var found=[];for(var r=0;r<grid.length;r++){var row=grid[r];var currSelectedWord='';for(var c=0;c<row.length;c++){var letter=row[c];var highlightedIndex=\"r\"+r+\"-c\"+c;var isHighlighted=highlightedChars.hasOwnProperty(highlightedIndex);if(isHighlighted){currSelectedWord=currSelectedWord+letter;}else{//console.log(\"trying to find \" + currSelectedWord);\n// check if currSelectedWord is word\nif(wordList.includes(currSelectedWord.toLowerCase())){found.push(currSelectedWord.toLowerCase());}// reset \ncurrSelectedWord=\"\";}}// end loop over columns\nif(wordList.includes(currSelectedWord.toLowerCase())){found.push(currSelectedWord.toLowerCase());}}//end loop over rows\nconsole.log(found+\" is found\");return found;}/**\n * Returns a random integer between min (inclusive) and max .\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */function getRandomInt(min,max){min=Math.ceil(min);max=Math.floor(max);return Math.floor(Math.random()*(max-min+1))+min;}module.exports={getWordGrid:getWordGrid,getWordsFound:getWordsFound};","map":{"version":3,"sources":["/Users/yara/Desktop/WebDevelopment/word-search/src/logic/app.js"],"names":["getWordGrid","wordList","rowCount","colCount","grid","r","col","c","push","usedRows","w","length","word","randomRow","foundRow","getRandomInt","includes","colStart","console","log","i","letter","toUpperCase","alphabet","randomCharacter","Math","floor","random","getWordsFound","highlightedChars","found","row","currSelectedWord","highlightedIndex","isHighlighted","hasOwnProperty","toLowerCase","min","max","ceil","module","exports"],"mappings":"AAAA,QAASA,CAAAA,WAAT,CAAqBC,QAArB,CAA+BC,QAA/B,CAAyCC,QAAzC,CAAmD,CAChD,GAAIC,CAAAA,IAAI,CAAG,EAAX,CAEA;AACC,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,QAApB,CAA8BG,CAAC,EAA/B,CAAmC,CAChC,GAAIC,CAAAA,GAAG,CAAG,EAAV,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,QAApB,CAA8BI,CAAC,EAA/B,CAAmC,CAC7BD,GAAG,CAACE,IAAJ,CAAS,EAAT,EACL,CACDJ,IAAI,CAACI,IAAL,CAAUF,GAAV,EACF,CACD,GAAIG,CAAAA,QAAQ,CAAG,EAAf,CACA;AACA,IAAM,GAAIC,CAAAA,CAAC,CAAG,CAAd,CAAiBA,CAAC,CAAGT,QAAQ,CAACU,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzC,GAAIE,CAAAA,IAAI,CAAGX,QAAQ,CAACS,CAAD,CAAnB,CACA,GAAIG,CAAAA,SAAS,CAAG,IAAhB,CACA,GAAIC,CAAAA,QAAQ,CAAG,KAAf,CACA,MAAO,CAACA,QAAR,CAAkB,CAChBD,SAAS,CAAGE,YAAY,CAAC,CAAD,CAAIb,QAAQ,CAAG,CAAf,CAAxB,CACA,GAAK,CAACO,QAAQ,CAACO,QAAT,CAAkBH,SAAlB,CAAN,CAAqC,CACnCJ,QAAQ,CAACD,IAAT,CAAcK,SAAd,EACAC,QAAQ,CAAG,IAAX,CACD,CACF,CAED,GAAIG,CAAAA,QAAQ,CAAGF,YAAY,CAAC,CAAD,CAAIZ,QAAQ,CAAGS,IAAI,CAACD,MAApB,CAA3B,CACAO,OAAO,CAACC,GAAR,CAAY,WAAaP,IAAb,CAAoB,MAApB,CAA6BC,SAA7B,CAAyC,GAAzC,CAA+CI,QAA3D,EAEA,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,IAAI,CAACD,MAAzB,CAAiCS,CAAC,EAAlC,CAAsC,CACpC,GAAIC,CAAAA,MAAM,CAAGT,IAAI,CAACQ,CAAD,CAAjB,CACEhB,IAAI,CAACS,SAAD,CAAJ,CAAgBI,QAAQ,CAAGG,CAA3B,EAAgCC,MAAM,CAACC,WAAP,EAAhC,CACH,CACF,CACD;AACA,GAAMC,CAAAA,QAAQ,CAAG,4BAAjB,CAEA,IAAK,GAAIlB,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAGH,QAApB,CAA8BG,EAAC,EAA/B,CAAmC,CAC/B,IAAK,GAAIE,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAGJ,QAApB,CAA8BI,EAAC,EAA/B,CAAmC,CACjC,GAAKH,IAAI,CAACC,EAAD,CAAJ,CAAQE,EAAR,IAAe,EAApB,CAAyB,CACvB,GAAMiB,CAAAA,eAAe,CAAGD,QAAQ,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBJ,QAAQ,CAACZ,MAApC,CAAD,CAAhC,CACAP,IAAI,CAACC,EAAD,CAAJ,CAAQE,EAAR,EAAaiB,eAAb,CACD,CACJ,CACF,CAED,MAAOpB,CAAAA,IAAP,CACH,CACD;AACA;AACA;AACA;AACA;AACA;AACA,SAEA,QAASwB,CAAAA,aAAT,CAAwBC,gBAAxB,CAA0C5B,QAA1C,CAAoDG,IAApD,CAA0D,CACxD,GAAI0B,CAAAA,KAAK,CAAG,EAAZ,CACA,IAAK,GAAIzB,CAAAA,CAAC,CAAC,CAAX,CAAcA,CAAC,CAAGD,IAAI,CAACO,MAAvB,CAA+BN,CAAC,EAAhC,CAAoC,CAClC,GAAI0B,CAAAA,GAAG,CAAG3B,IAAI,CAACC,CAAD,CAAd,CACA,GAAI2B,CAAAA,gBAAgB,CAAG,EAAvB,CACA,IAAK,GAAIzB,CAAAA,CAAC,CAAC,CAAX,CAAcA,CAAC,CAAGwB,GAAG,CAACpB,MAAtB,CAA8BJ,CAAC,EAA/B,CAAmC,CAClC,GAAIc,CAAAA,MAAM,CAAGU,GAAG,CAACxB,CAAD,CAAhB,CACA,GAAI0B,CAAAA,gBAAgB,CAAG,IAAM5B,CAAN,CAAU,IAAV,CAAiBE,CAAxC,CACA,GAAI2B,CAAAA,aAAa,CAAGL,gBAAgB,CAACM,cAAjB,CAAgCF,gBAAhC,CAApB,CACA,GAAIC,aAAJ,CAAmB,CACjBF,gBAAgB,CAAGA,gBAAgB,CAAGX,MAAtC,CACD,CAFD,IAEO,CAEL;AACC;AACA,GAAIpB,QAAQ,CAACe,QAAT,CAAkBgB,gBAAgB,CAACI,WAAjB,EAAlB,CAAJ,CAAuD,CACrDN,KAAK,CAACtB,IAAN,CAAWwB,gBAAgB,CAACI,WAAjB,EAAX,EAED,CACD;AACAJ,gBAAgB,CAAG,EAAnB,CACF,CACD,CAAG;AACJ,GAAI/B,QAAQ,CAACe,QAAT,CAAkBgB,gBAAgB,CAACI,WAAjB,EAAlB,CAAJ,CAAuD,CACrDN,KAAK,CAACtB,IAAN,CAAWwB,gBAAgB,CAACI,WAAjB,EAAX,EACD,CAEF,CAAC;AACFlB,OAAO,CAACC,GAAR,CAAYW,KAAK,CAAG,WAApB,EACA,MAAOA,CAAAA,KAAP,CAED,CACD;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASf,CAAAA,YAAT,CAAsBsB,GAAtB,CAA2BC,GAA3B,CAAgC,CAC5BD,GAAG,CAAGZ,IAAI,CAACc,IAAL,CAAUF,GAAV,CAAN,CACAC,GAAG,CAAGb,IAAI,CAACC,KAAL,CAAWY,GAAX,CAAN,CACA,MAAOb,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBW,GAAG,CAAGD,GAAN,CAAY,CAA7B,CAAX,EAA8CA,GAArD,CACH,CAGDG,MAAM,CAACC,OAAP,CAAiB,CAAEzC,WAAW,CAAXA,WAAF,CAAe4B,aAAa,CAAbA,aAAf,CAAjB","sourcesContent":["function getWordGrid(wordList, rowCount, colCount) {\n   let grid = []\n   \n   //creating empty grid\n    for (let r = 0; r < rowCount; r++) {\n       let col = []; \n       for (let c = 0; c < colCount; c++) {\n             col.push('');\n       } \n       grid.push(col);\n    } \n    let usedRows = [];\n    // fill with  words from word list\n    for ( let w = 0; w < wordList.length; w++) {\n      let word = wordList[w];\n      let randomRow = null;\n      let foundRow = false;\n      while (!foundRow) {\n        randomRow = getRandomInt(0, rowCount - 1); \n        if ( !usedRows.includes(randomRow) ) {\n          usedRows.push(randomRow);\n          foundRow = true;\n        }\n      } \n\n      let colStart = getRandomInt(0, colCount - word.length);\n      console.log(\"placing \" + word + \" in \" + randomRow + \" \" + colStart);\n      \n      for (let i = 0; i < word.length; i++) {\n        let letter = word[i];\n          grid[randomRow][colStart + i] = letter.toUpperCase();\n      }\n    }      \n    // fill remaining empty cells with random letters\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \n    for (let r = 0; r < rowCount; r++) {\n        for (let c = 0; c < colCount; c++) {\n          if ( grid[r][c] === '' ) {\n            const randomCharacter = alphabet[Math.floor(Math.random() * alphabet.length)]\n            grid[r][c] = randomCharacter;\n          }\n      }\n    }\n\n    return grid;\n} \n/* higihlightedChars = {\"r0-c0\": true,\n          \"r1-c0\": true,\n          \"r2-c0\": true,\n        }, \n  this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\nthis.grid = [['d','o','g','t','s'],['h','e','h','s', 'm',],['d','i','h','l','m',]]\n      }*/\n\nfunction getWordsFound (highlightedChars, wordList, grid) {\n  let found = []; \n  for (let r=0; r < grid.length; r++) {\n    let row = grid[r];\n    let currSelectedWord = '';\n    for (let c=0; c < row.length; c++) {\n     let letter = row[c];\n     let highlightedIndex = \"r\" + r + \"-c\" + c;\n     let isHighlighted = highlightedChars.hasOwnProperty(highlightedIndex);\n     if (isHighlighted) { \n       currSelectedWord = currSelectedWord + letter;\n     } else {\n       \n       //console.log(\"trying to find \" + currSelectedWord);\n        // check if currSelectedWord is word\n        if (wordList.includes(currSelectedWord.toLowerCase())) {\n          found.push(currSelectedWord.toLowerCase());\n\n        } \n        // reset \n        currSelectedWord = \"\";\n     } \n    }   // end loop over columns\n    if (wordList.includes(currSelectedWord.toLowerCase())) {\n      found.push(currSelectedWord.toLowerCase());\n    } \n\n  } //end loop over rows\n  console.log(found + \" is found\")\n  return found\n\n}\n/**\n * Returns a random integer between min (inclusive) and max .\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nmodule.exports = { getWordGrid, getWordsFound };"]},"metadata":{},"sourceType":"module"}