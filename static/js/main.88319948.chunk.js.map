{"version":3,"sources":["cmp/BoardCell.js","cmp/grid.js","cmp/wordList.js","cmp/wordsearch.js","index.js","logic/app.js"],"names":["BoardCell","props","getClasses","classes","isSelected","push","join","handleClick","bind","beginSelection","endSelection","updateSelection","e","console","log","this","letter","onBeginSelection","rowIndex","colIndex","value","onEndSelection","onUpdateSelection","className","onClick","onMouseDown","onMouseUp","onMouseMove","React","Component","Grid","state","isSelecting","startRow","startCol","shouldHighlight","startHightlightedChars","rows","cols","charIndex","highlightedChars","hasOwnProperty","val","cellSelected","cloneObject","setState","handleHighlightChange","Math","min","max","obj","JSON","parse","stringify","board","values","forEach","element","wordList","i","length","ShowWordList","foundWordList","map","word","includes","renderSuccessMessage","WordSearch","grid","logic","rowIndexStart","rowIndexEnd","colIndexStart","colIndexEnd","newHighlightedState","newHighlightedChars","c","r","ReactDOM","render","document","getElementById","getRandomInt","ceil","floor","random","module","exports","getWordGrid","rowCount","colCount","col","usedRows","w","randomRow","foundRow","colStart","toUpperCase","alphabet","randomCharacter","getWordsFound","found","row","currSelectedWord","highlightedIndex","toLowerCase"],"mappings":"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","file":"static/js/main.88319948.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class BoardCell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.beginSelection = this.beginSelection.bind(this);\n        this.endSelection = this.endSelection.bind(this);\n        this.updateSelection = this.updateSelection.bind(this);\n    }\n\n        \n    handleClick(e) { \n        console.log(\"hello \" + this.props.letter);\n      //  this.props.onCellClick(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    }\n    beginSelection(e) { \n        this.props.onBeginSelection(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    }\n    endSelection(e) { \n        this.props.onEndSelection(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    }\n    updateSelection(e) { \n        this.props.onUpdateSelection(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    } \n    getClasses = () => {\n        let classes=['cell'];\n        if (this.props.isSelected) classes.push('selected');\n\n        return classes.join(' ');\n\n    }\n        \n    \n\n    render() {\n        return( \n            <div className={this.getClasses()} onClick={this.handleClick} \n            onMouseDown={this.beginSelection}\n            onMouseUp={this.endSelection}\n            onMouseMove={this.updateSelection}>\n            {this.props.letter}\n            </div>               \n        )\n\n    }\n\n\n};\n","\nimport React from 'react';\nimport BoardCell from './BoardCell'\n\n\n\nexport default class Grid extends React.Component {\n    constructor(props) {      \n      super(props); \n      this.beginSelection = this.beginSelection.bind(this);\n      this.endSelection = this.endSelection.bind(this);\n      this.updateSelection = this.updateSelection.bind(this);  \n      this.state = {\n        isSelecting: false,\n        startRow:0,\n        startCol:0,\n        shouldHighlight:0,\n        startHightlightedChars:0\n      }\n    \n     }\n\n\n    cellSelected(rows,cols) {\n      let charIndex=\"r\" + rows + \"-c\" + cols;\n      return this.props.highlightedChars.hasOwnProperty(charIndex);\n    }\n\n    beginSelection(rowIndex, colIndex, val) {\n      console.log(\"beginSelection \" + rowIndex + \" \" + colIndex);\n      let shouldHighlight = !this.cellSelected(rowIndex,colIndex);\n      let startHightlightedChars = this.cloneObject(this.props.highlightedChars);\n\n      this.setState({\n        isSelecting: true, \n        startRow:rowIndex, \n        startCol:colIndex, \n        shouldHighlight:shouldHighlight,\n        startHightlightedChars: startHightlightedChars\n      } )\n      this.props.handleHighlightChange(rowIndex, rowIndex, colIndex, colIndex, shouldHighlight, startHightlightedChars);\n      \n    }\n\n    endSelection(rowIndex, colIndex, val) {\n      console.log(\"endSelection\" );\n      this.updateSelection(rowIndex, colIndex)\n      this.setState({isSelecting: false})\n\n    \n    }\n\n    updateSelection(rowIndex, colIndex, val) {\n     if (this.state.isSelecting) {\n       if (this.state.startRow===rowIndex) {\n            this.props.handleHighlightChange(rowIndex, rowIndex, Math.min(colIndex, this.state.startCol), Math.max(colIndex, this.state.startCol), this.state.shouldHighlight, this.state.startHightlightedChars);\n       } else if (this.state.startCol===colIndex) {\n        this.props.handleHighlightChange(Math.min(rowIndex, this.state.startRow), Math.max(rowIndex, this.state.startRow), colIndex, colIndex, this.state.shouldHighlight, this.state.startHightlightedChars);\n   } \n       console.log(\"updateSelection\" );\n     }\n    } \n\n    cloneObject(obj) { \n      return JSON.parse(JSON.stringify(obj));\n      }\n\n    render() {\n      //const status = 'you have' + ' ' + {words.length} + ' words left';\n      const board = [];\n      let rows=0;\n\n      this.props.values.forEach(element => {\n        let wordList =[];\n          for (let i = 0; i < element.length; i++){\n            wordList.push(<BoardCell \n              rowIndex={rows} \n              colIndex={i} \n              letter={element[i]} \n              isSelected={this.cellSelected(rows,i)} \n              onBeginSelection={this.beginSelection}\n              onEndSelection={this.endSelection}\n              onUpdateSelection={this.updateSelection}\n              />) \n          };\n          board.push(<div className=\"board-row\">{wordList}</div>)\n  \n          rows++;\n        });\n          \n          let isSelected = [];\n      \n\n\n      return (\n           <div>\n            {board}\n\n          </div>\n      );\n    }\n  }","import React from 'react';\n\nexport default class ShowWordList extends React.Component {\n    renderSuccessMessage() {\n        if (this.props.wordList.length === this.props.foundWordList.length) {\n          return (<h1> Congratulations, you found all the words </h1>)\n        }\n\n    }\n  render() {\n\n    return (\n    \t<div>\n        <div>\n          {this.props.wordList.map(word => <h2 className={this.props.foundWordList.includes(word) ? 'wordfound' : ''}>{word}</h2>)}\n        </div>\n        <div>\n         {this.renderSuccessMessage()}\n        </div>\n      </div>\n    )\n}\n}","\nimport React from 'react';\nimport Grid from './grid';\nimport * as logic from '../logic/app';\nimport ShowWordList from './wordList';\nimport BoardCell from './BoardCell';\n//import Status from './status'; // import Finished from './status';\n\n\n\n\nexport default class WordSearch extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        highlightedChars: {\n        },\n      };\n      \n      this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\n      let rowCount = 10;\n      let colCount = 10;\n\n      this.grid = logic.getWordGrid(this.wordList, rowCount, colCount);\n\n      this.handleHighlightChange = this.handleHighlightChange.bind(this); \n    }\n\n    handleHighlightChange(rowIndexStart, rowIndexEnd, colIndexStart, colIndexEnd, newHighlightedState, startHightlightedChars){\n      const newHighlightedChars = this.cloneObject(startHightlightedChars); \n    \n      if (rowIndexStart == rowIndexEnd){ // if horizontal\n        for (let c = colIndexStart; c <= colIndexEnd; c++) {\n          let charIndex = \"r\" + rowIndexStart + \"-c\" + c;\n          \n          if (newHighlightedState) {\n            newHighlightedChars[charIndex] = true;\n          } else {\n            delete newHighlightedChars[charIndex];\n          }\n      \n        }\n\n      } else if (colIndexStart == colIndexEnd) {// if vertical\n        for (let r = rowIndexStart; r <= rowIndexEnd; r++) {\n          let charIndex = \"r\" + r + \"-c\" + colIndexStart;\n          \n          if (newHighlightedState) {\n            newHighlightedChars[charIndex] = true;\n          } else {\n            delete newHighlightedChars[charIndex];\n          }\n      \n        }\n      }\n    \n    \n      this.setState({\n       highlightedChars: newHighlightedChars, \n      })\n    }\n\n  cloneObject(obj) { \n  return JSON.parse(JSON.stringify(obj));\n  }\n  \n    render() {\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Grid values={this.grid} highlightedChars={this.state.highlightedChars} handleHighlightChange={this.handleHighlightChange}  />\n          </div>\n          <div className=\"game-info\">\n                <ol>Welcome to Word Sreach react game</ol>\n                <ol> <ShowWordList wordList={this.wordList} foundWordList={logic.getWordsFound(this.state.highlightedChars,this.wordList,this.grid)}/></ol>\n\n        </div>\n        </div>\n\n      )}};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WordSearch from './cmp/wordsearch';\n\n/* TODO\n\nShow word List, \nallow Selection of multiple cells\nallow diagonal selection?\n\n*/\n\nReactDOM.render(\n  <WordSearch />,\n  document.getElementById('root')\n);\n","function getWordGrid(wordList, rowCount, colCount) {\n   let grid = []\n   \n   //creating empty grid\n    for (let r = 0; r < rowCount; r++) {\n       let col = []; \n       for (let c = 0; c < colCount; c++) {\n             col.push('');\n       } \n       grid.push(col);\n    } \n    let usedRows = [];\n    // fill with  words from word list\n    for ( let w = 0; w < wordList.length; w++) {\n      let word = wordList[w];\n      let randomRow = null;\n      let foundRow = false;\n      while (!foundRow) {\n        randomRow = getRandomInt(0, rowCount - 1); \n        if ( !usedRows.includes(randomRow) ) {\n          usedRows.push(randomRow);\n          foundRow = true;\n        }\n      } \n\n      let colStart = getRandomInt(0, colCount - word.length);\n      console.log(\"placing \" + word + \" in \" + randomRow + \" \" + colStart);\n      \n      for (let i = 0; i < word.length; i++) {\n        let letter = word[i];\n          grid[randomRow][colStart + i] = letter.toUpperCase();\n      }\n    }      \n    // fill remaining empty cells with random letters\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \n    for (let r = 0; r < rowCount; r++) {\n        for (let c = 0; c < colCount; c++) {\n          if ( grid[r][c] === '' ) {\n            const randomCharacter = alphabet[Math.floor(Math.random() * alphabet.length)].toUpperCase()\n            grid[r][c] = randomCharacter;\n          }\n      }\n    }\n\n    return grid;\n} \n\nfunction getWordsFound (highlightedChars, wordList, grid) {\n  let found = []; \n  for (let r=0; r < grid.length; r++) {\n    let row = grid[r];\n    let currSelectedWord = '';\n    for (let c=0; c < row.length; c++) {\n     let letter = row[c];\n     let highlightedIndex = \"r\" + r + \"-c\" + c;\n     let isHighlighted = highlightedChars.hasOwnProperty(highlightedIndex);\n     if (isHighlighted) { \n       currSelectedWord = currSelectedWord + letter;\n     } else {\n       \n        // check if currSelectedWord is word\n        if (wordList.includes(currSelectedWord.toLowerCase())) {\n          found.push(currSelectedWord.toLowerCase());\n\n        } \n        // reset \n        currSelectedWord = \"\";\n     } \n    }   // end loop over columns\n    if (wordList.includes(currSelectedWord.toLowerCase())) {\n      found.push(currSelectedWord.toLowerCase());\n    } \n\n  } //end loop over rows\n  console.log(found + \" is found\")\n  return found\n\n}\n/**\n * Returns a random integer between min (inclusive) and max .\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nmodule.exports = { getWordGrid, getWordsFound };"],"sourceRoot":""}