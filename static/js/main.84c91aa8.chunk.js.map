{"version":3,"sources":["cmp/BoardCell.js","cmp/grid.js","cmp/wordList.js","cmp/wordsearch.js","index.js","logic/app.js"],"names":["BoardCell","props","getClasses","classes","isSelected","push","join","handleClick","bind","beginSelection","endSelection","updateSelection","e","console","log","this","letter","onBeginSelection","rowIndex","colIndex","value","onEndSelection","onUpdateSelection","className","onClick","onMouseDown","onMouseUp","onMouseMove","React","Component","Grid","state","isSelecting","startRow","startCol","shouldHighlight","rows","cols","charIndex","highlightedChars","hasOwnProperty","val","cellSelected","setState","handleHighlightChange","Math","min","max","board","values","forEach","element","wordList","i","length","ShowWordList","map","word","foundWordList","includes","WordSearch","grid","logic","rowIndexStart","rowIndexEnd","colIndexStart","colIndexEnd","newHighlightedState","newHighlightedChars","cloneObject","c","r","obj","JSON","parse","stringify","ReactDOM","render","document","getElementById","getRandomInt","ceil","floor","random","module","exports","getWordGrid","rowCount","colCount","col","usedRows","w","randomRow","foundRow","colStart","toUpperCase","alphabet","randomCharacter","getWordsFound","found","row","currSelectedWord","highlightedIndex","toLowerCase"],"mappings":"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","file":"static/js/main.84c91aa8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class BoardCell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.beginSelection = this.beginSelection.bind(this);\n        this.endSelection = this.endSelection.bind(this);\n        this.updateSelection = this.updateSelection.bind(this);\n    }\n\n        \n    handleClick(e) { \n        console.log(\"hello \" + this.props.letter);\n      //  this.props.onCellClick(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    }\n    beginSelection(e) { \n        this.props.onBeginSelection(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    }\n    endSelection(e) { \n        this.props.onEndSelection(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    }\n    updateSelection(e) { \n        this.props.onUpdateSelection(this.props.rowIndex, this.props.colIndex, this.props.value); //\n    } \n    getClasses = () => {\n        let classes=['cell'];\n        if (this.props.isSelected) classes.push('selected');\n        //if (this.props.isHighlighted) classes.push('isHighlighted');\n\n        return classes.join(' ');\n\n    }\n        \n    \n            // console.log(this.props.classes)\n\n    render() {\n        return( \n            <div className={this.getClasses()} onClick={this.handleClick} \n            onMouseDown={this.beginSelection}\n            onMouseUp={this.endSelection}\n            onMouseMove={this.updateSelection}>\n            {this.props.letter}\n            </div>               \n        )\n\n    }\n\n\n};\n\n /*   getClasses = () => {\n        let classes = ['cell']; //all cells get the 'cell' class, and maybe additional:\n\n        if (this.props.isGivenValue) classes.push('given');\n        if (this.props.isSelected) classes.push('selected');\n        if (this.props.isHighlighted) classes.push('related');\n        if (this.props.isConflicting) classes.push('wrong');\n        \n        return classes.join(' ');\n    }\n*/","\nimport React from 'react';\nimport BoardCell from './BoardCell'\nimport Table from './otherTable';\n\n\n\nexport default class Grid extends React.Component {\n    constructor(props) {      \n      super(props); \n      this.beginSelection = this.beginSelection.bind(this);\n      this.endSelection = this.endSelection.bind(this);\n      this.updateSelection = this.updateSelection.bind(this);  \n      this.state = {\n        isSelecting: false,\n        startRow:0,\n        startCol:0,\n        shouldHighlight:0\n      }\n    \n     }\n\n\n    cellSelected(rows,cols) {\n      let charIndex=\"r\" + rows + \"-c\" + cols;\n      return this.props.highlightedChars.hasOwnProperty(charIndex);\n    }\n\n    beginSelection(rowIndex, colIndex, val) {\n      console.log(\"beginSelection \" + rowIndex + \" \" + colIndex);\n      let shouldHighlight = !this.cellSelected(rowIndex,colIndex);\n\n\n      this.setState({isSelecting: true, startRow:rowIndex, startCol:colIndex, shouldHighlight:shouldHighlight } )\n      this.props.handleHighlightChange(rowIndex, rowIndex, colIndex, colIndex, shouldHighlight);\n      \n    }\n\n    endSelection(rowIndex, colIndex, val) {\n      console.log(\"endSelection\" );\n      this.updateSelection(rowIndex, colIndex)\n      this.setState({isSelecting: false})\n\n    \n    }\n\n    updateSelection(rowIndex, colIndex, val) {\n     if (this.state.isSelecting) {\n       if (this.state.startRow===rowIndex) {\n            this.props.handleHighlightChange(rowIndex, rowIndex, Math.min(colIndex, this.state.startCol), Math.max(colIndex, this.state.startCol), this.state.shouldHighlight);\n       } else if (this.state.startCol===colIndex) {\n        this.props.handleHighlightChange(Math.min(rowIndex, this.state.startRow), Math.max(rowIndex, this.state.startRow), colIndex, colIndex, this.state.shouldHighlight);\n   } \n       console.log(\"updateSelection\" );\n     }\n    } \n\n    render() {\n      //const status = 'you have' + ' ' + {words.length} + ' words left';\n      const board = [];\n      let rows=0;\n\n      this.props.values.forEach(element => {\n        let wordList =[];\n          for (let i = 0; i < element.length; i++){\n            wordList.push(<BoardCell \n              rowIndex={rows} \n              colIndex={i} \n              letter={element[i]} \n              isSelected={this.cellSelected(rows,i)} \n              onBeginSelection={this.beginSelection}\n              onEndSelection={this.endSelection}\n              onUpdateSelection={this.updateSelection}\n              />) \n          };\n          board.push(<div className=\"board-row\">{wordList}</div>)\n  \n          rows++;\n        });\n          \n          let isSelected = [];\n      \n\n\n      return (\n           <div>\n            {board}\n\n          </div>\n      );\n    }\n  }","import React from 'react';\n\nexport default class ShowWordList extends React.Component {\n  render() {\n    return (\n    \t<div>\n      {this.props.wordList.map(word => <h2 className={this.props.foundWordList.includes(word) ? 'wordfound' : ''}>{word}</h2>)}\n      \t</div>\n    )\n}\n}","\nimport React from 'react';\nimport Grid from './grid';\nimport * as logic from '../logic/app';\nimport ShowWordList from './wordList';\nimport Table from './otherTable';\nimport BoardCell from './BoardCell';\n//import Status from './status';\n\n\n\nexport default class WordSearch extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        highlightedChars: {\n        },\n      };\n      //let drag = false;\n      \n      this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\n      let rowCount = 10;\n      let colCount = 10;\n\n      this.grid = logic.getWordGrid(this.wordList, rowCount, colCount);\n\n     // this.showWordList(document.getElementById(\"list\"));\n      this.handleHighlightChange = this.handleHighlightChange.bind(this); \n    }\n\n    handleHighlightChange(rowIndexStart, rowIndexEnd, colIndexStart, colIndexEnd, newHighlightedState){\n      const newHighlightedChars = this.cloneObject(this.state.highlightedChars); \n      if (rowIndexStart == rowIndexEnd){ // if horizontal\n        for (let c = colIndexStart; c <= colIndexEnd; c++) {\n          let charIndex = \"r\" + rowIndexStart + \"-c\" + c;\n          \n          if (newHighlightedState) {\n            newHighlightedChars[charIndex] = true;\n          } else {\n            delete newHighlightedChars[charIndex];\n          }\n      \n        }\n\n      } else if (colIndexStart == colIndexEnd) {// if vertical\n        for (let r = rowIndexStart; r <= rowIndexEnd; r++) {\n          let charIndex = \"r\" + r + \"-c\" + colIndexStart;\n          \n          if (newHighlightedState) {\n            newHighlightedChars[charIndex] = true;\n          } else {\n            delete newHighlightedChars[charIndex];\n          }\n      \n        }\n      }\n    \n    \n      this.setState({\n       highlightedChars: newHighlightedChars, \n      })\n    }\n\n  cloneObject(obj) { \n  return JSON.parse(JSON.stringify(obj));\n  }\n  \n    render() {\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Grid values={this.grid} highlightedChars={this.state.highlightedChars} handleHighlightChange={this.handleHighlightChange}  />\n          </div>\n          <div className=\"game-info\">\n                <ol>Welcome to Word Sreach react game</ol>\n                <ol> <ShowWordList wordList={this.wordList} foundWordList={logic.getWordsFound(this.state.highlightedChars,this.wordList,this.grid)}/></ol>\n\n        </div>\n        </div>\n\n      )}};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WordSearch from './cmp/wordsearch';\n\n/* TODO\n\nShow word List, \nallow Selection of multiple cells\nallow diagonal selection?\n\n*/\n\nReactDOM.render(\n  <WordSearch />,\n  document.getElementById('root')\n);\n","function getWordGrid(wordList, rowCount, colCount) {\n   let grid = []\n   \n   //creating empty grid\n    for (let r = 0; r < rowCount; r++) {\n       let col = []; \n       for (let c = 0; c < colCount; c++) {\n             col.push('');\n       } \n       grid.push(col);\n    } \n    let usedRows = [];\n    // fill with  words from word list\n    for ( let w = 0; w < wordList.length; w++) {\n      let word = wordList[w];\n      let randomRow = null;\n      let foundRow = false;\n      while (!foundRow) {\n        randomRow = getRandomInt(0, rowCount - 1); \n        if ( !usedRows.includes(randomRow) ) {\n          usedRows.push(randomRow);\n          foundRow = true;\n        }\n      } \n\n      let colStart = getRandomInt(0, colCount - word.length);\n      console.log(\"placing \" + word + \" in \" + randomRow + \" \" + colStart);\n      \n      for (let i = 0; i < word.length; i++) {\n        let letter = word[i];\n          grid[randomRow][colStart + i] = letter.toUpperCase();\n      }\n    }      \n    // fill remaining empty cells with random letters\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \n    for (let r = 0; r < rowCount; r++) {\n        for (let c = 0; c < colCount; c++) {\n          if ( grid[r][c] === '' ) {\n            const randomCharacter = alphabet[Math.floor(Math.random() * alphabet.length)]\n            grid[r][c] = randomCharacter;\n          }\n      }\n    }\n\n    return grid;\n} \n/* higihlightedChars = {\"r0-c0\": true,\n          \"r1-c0\": true,\n          \"r2-c0\": true,\n        }, \n  this.wordList = ['house', 'dog', 'leg', 'react', 'hello'];\nthis.grid = [['d','o','g','t','s'],['h','e','h','s', 'm',],['d','i','h','l','m',]]\n      }*/\n\nfunction getWordsFound (highlightedChars, wordList, grid) {\n  let found = []; \n  for (let r=0; r < grid.length; r++) {\n    let row = grid[r];\n    let currSelectedWord = '';\n    for (let c=0; c < row.length; c++) {\n     let letter = row[c];\n     let highlightedIndex = \"r\" + r + \"-c\" + c;\n     let isHighlighted = highlightedChars.hasOwnProperty(highlightedIndex);\n     if (isHighlighted) { \n       currSelectedWord = currSelectedWord + letter;\n     } else {\n       \n       //console.log(\"trying to find \" + currSelectedWord);\n        // check if currSelectedWord is word\n        if (wordList.includes(currSelectedWord.toLowerCase())) {\n          found.push(currSelectedWord.toLowerCase());\n\n        } \n        // reset \n        currSelectedWord = \"\";\n     } \n    }   // end loop over columns\n    if (wordList.includes(currSelectedWord.toLowerCase())) {\n      found.push(currSelectedWord.toLowerCase());\n    } \n\n  } //end loop over rows\n  console.log(found + \" is found\")\n  return found\n\n}\n/**\n * Returns a random integer between min (inclusive) and max .\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nmodule.exports = { getWordGrid, getWordsFound };"],"sourceRoot":""}